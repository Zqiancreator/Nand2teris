<class>
"   </statements>\n   <symbol> } </symbol>\n  </subroutineBody>\n </subroutineDec>\n <symbol> } </symbol>\n</class>\n<class>\n <keyword> class </keyword>\n <identifier> SquareGame </identifier>\n <symbol> { </symbol>\n <classVarDec>\n  <keyword> field </keyword>\n  <identifier> Square </identifier>\n  <identifier> square </identifier>\n  <symbol> ; </symbol>\n </classVarDec>\n <classVarDec>\n  <keyword> field </keyword>\n  <keyword> int </keyword>\n  <identifier> direction </identifier>\n  <symbol> ; </symbol>\n </classVarDec>\n <subroutineDec>\n  <keyword> constructor </keyword>\n  <identifier> SquareGame </identifier>\n  <identifier> new </identifier>\n  <symbol> ( </symbol>\n  <parameterList>\n  </parameterList>\n  <symbol> ) </symbol>\n  <subroutineBody>\n   <symbol> { </symbol>\n   <statements>\n    <letStatement>\n     <keyword> let </keyword>\n     <identifier> square </identifier>\n     <symbol> = </symbol>\n      <expression>\n       <term>\n        <identifier> Square </identifier>\n        <symbol> . </symbol>\n        <identifier> new </identifier>\n        <symbol> ( </symbol>\n        <expressionList>\n        </expressionList>\n"
"     <symbol> ; </symbol>\n    </letStatement>\n    <whileStatement>\n     <keyword> while </keyword>\n     <symbol> ( </symbol>\n      <expression>\n       <term>\n        <symbol> ~ </symbol>\n         <term>\n          <identifier> exit </identifier>\n         </term>\n       </term>\n      </expression>\n"
 <keyword> class </keyword>
 <identifier> Main </identifier>
 <symbol> { </symbol>
 <classVarDec>
  <keyword> static </keyword>
  <keyword> boolean </keyword>
  <identifier> test </identifier>
  <symbol> ; </symbol>
 </classVarDec>
 <subroutineDec>
  <keyword> function </keyword>
  <keyword> void </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <parameterList>
  </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
   <symbol> { </symbol>
   <varDec>
    <keyword> var </keyword>
    <identifier> SquareGame </identifier>
    <identifier> game </identifier>
    <symbol> ; </symbol>
   </varDec>
   <statements>
    <letStatement>
     <keyword> let </keyword>
     <identifier> game </identifier>
     <symbol> = </symbol>
      <expression>
       <term>
        <identifier> SquareGame </identifier>
        <symbol> . </symbol>
        <identifier> new </identifier>
        <symbol> ( </symbol>
        <expressionList>
        </expressionList>
        <symbol> ) </symbol>
       </term>
      </expression>
     <symbol> ; </symbol>
    </letStatement>
    <doStatement>
     <keyword> do </keyword>
     <identifier> game </identifier>
     <symbol> . </symbol>
     <identifier> run </identifier>
     <symbol> ( </symbol>
     <expressionList>
     </expressionList>
     <symbol> ) </symbol>
     <symbol> ; </symbol>
    </doStatement>
    <doStatement>
     <keyword> do </keyword>
     <identifier> game </identifier>
     <symbol> . </symbol>
     <identifier> dispose </identifier>
     <symbol> ( </symbol>
     <expressionList>
     </expressionList>
     <symbol> ) </symbol>
     <symbol> ; </symbol>
    </doStatement>
    <returnStatement>
     <keyword> return </keyword>
     <symbol> ; </symbol>
    </returnStatement>
   </statements>
   <symbol> } </symbol>
  </subroutineBody>
 </subroutineDec>
 <subroutineDec>
  <keyword> function </keyword>
  <keyword> void </keyword>
  <identifier> more </identifier>
  <symbol> ( </symbol>
  <parameterList>
  </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
   <symbol> { </symbol>
   <varDec>
    <keyword> var </keyword>
    <keyword> int </keyword>
    <identifier> i </identifier>
    <symbol> , </symbol>
    <identifier> j </identifier>
    <symbol> ; </symbol>
   </varDec>
   <varDec>
    <keyword> var </keyword>
    <identifier> String </identifier>
    <identifier> s </identifier>
    <symbol> ; </symbol>
   </varDec>
   <varDec>
    <keyword> var </keyword>
    <identifier> Array </identifier>
    <identifier> a </identifier>
    <symbol> ; </symbol>
   </varDec>
   <statements>
    <ifStatement>
     <keyword> if </keyword>
     <symbol> ( </symbol>
      <expression>
       <term>
        <keyword> false </keyword>
       </term>
      </expression>
     <symbol> ) </symbol>
     <symbol> { </symbol>
     <statements>
      <letStatement>
       <keyword> let </keyword>
       <identifier> s </identifier>
       <symbol> = </symbol>
        <expression>
         <term>
          <stringConstant> string constant </stringConstant>
         </term>
        </expression>
       <symbol> ; </symbol>
      </letStatement>
      <letStatement>
       <keyword> let </keyword>
       <identifier> s </identifier>
       <symbol> = </symbol>
        <expression>
         <term>
          <keyword> null </keyword>
         </term>
        </expression>
       <symbol> ; </symbol>
      </letStatement>
      <letStatement>
       <keyword> let </keyword>
       <identifier> a </identifier>
       <symbol> [ </symbol>
        <expression>
         <term>
          <integerConstant> 1 </integerConstant>
         </term>
        </expression>
       <symbol> ] </symbol>
       <symbol> = </symbol>
        <expression>
         <term>
          <identifier> a </identifier>
          <symbol> [ </symbol>
           <expression>
            <term>
             <integerConstant> 2 </integerConstant>
            </term>
           </expression>
          <symbol> ] </symbol>
         </term>
        </expression>
       <symbol> ; </symbol>
      </letStatement>
     </statements>
     <symbol> } </symbol>
     <keyword> else </keyword>
     <symbol> { </symbol>
     <statements>
      <letStatement>
       <keyword> let </keyword>
       <identifier> i </identifier>
       <symbol> = </symbol>
        <expression>
         <term>
          <identifier> i </identifier>
         </term>
        <symbol> * </symbol>
         <term>
          <symbol> ( </symbol>
           <expression>
            <term>
             <symbol> - </symbol>
              <term>
               <identifier> j </identifier>
              </term>
            </term>
           </expression>
          <symbol> ) </symbol>
         </term>
        </expression>
       <symbol> ; </symbol>
      </letStatement>
      <letStatement>
       <keyword> let </keyword>
       <identifier> j </identifier>
       <symbol> = </symbol>
        <expression>
         <term>
          <identifier> j </identifier>
         </term>
        <symbol> / </symbol>
         <term>
          <symbol> ( </symbol>
           <expression>
            <term>
             <symbol> - </symbol>
              <term>
               <integerConstant> 2 </integerConstant>
              </term>
            </term>
           </expression>
          <symbol> ) </symbol>
         </term>
        </expression>
       <symbol> ; </symbol>
      </letStatement>
      <letStatement>
       <keyword> let </keyword>
       <identifier> i </identifier>
       <symbol> = </symbol>
        <expression>
         <term>
          <identifier> i </identifier>
         </term>
        <symbol> | </symbol>
         <term>
          <identifier> j </identifier>
         </term>
        </expression>
       <symbol> ; </symbol>
      </letStatement>
     </statements>
     <symbol> } </symbol>
    </ifStatement>
    <returnStatement>
     <keyword> return </keyword>
     <symbol> ; </symbol>
    </returnStatement>
   </statements>
   <symbol> } </symbol>
  </subroutineBody>
 </subroutineDec>
 <symbol> } </symbol>
</class>
<class>
 <keyword> class </keyword>
 <identifier> Square </identifier>
 <symbol> { </symbol>
 <classVarDec>
  <keyword> field </keyword>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> y </identifier>
  <symbol> ; </symbol>
 </classVarDec>
 <classVarDec>
  <keyword> field </keyword>
  <keyword> int </keyword>
  <identifier> size </identifier>
  <symbol> ; </symbol>
 </classVarDec>
 <subroutineDec>
  <keyword> constructor </keyword>
  <identifier> Square </identifier>
  <identifier> new </identifier>
  <symbol> ( </symbol>
  <parameterList>
   <keyword> int </keyword>
   <identifier> Ax </identifier>
   <symbol> , </symbol>
   <keyword> int </keyword>
   <identifier> Ay </identifier>
   <symbol> , </symbol>
   <keyword> int </keyword>
   <identifier> Asize </identifier>
  </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
   <symbol> { </symbol>
   <statements>
    <letStatement>
     <keyword> let </keyword>
     <identifier> x </identifier>
     <symbol> = </symbol>
      <expression>
       <term>
        <identifier> Ax </identifier>
       </term>
      </expression>
     <symbol> ; </symbol>
    </letStatement>
    <letStatement>
     <keyword> let </keyword>
     <identifier> y </identifier>
     <symbol> = </symbol>
      <expression>
       <term>
        <identifier> Ay </identifier>
       </term>
      </expression>
     <symbol> ; </symbol>
    </letStatement>
    <letStatement>
     <keyword> let </keyword>
     <identifier> size </identifier>
     <symbol> = </symbol>
      <expression>
       <term>
        <identifier> Asize </identifier>
       </term>
      </expression>
     <symbol> ; </symbol>
    </letStatement>
    <doStatement>
     <keyword> do </keyword>
     <identifier> draw </identifier>
     <symbol> ( </symbol>
     <expressionList>
     </expressionList>
     <symbol> ) </symbol>
     <symbol> ; </symbol>
    </doStatement>
    <returnStatement>
     <keyword> return </keyword>
      <expression>
       <term>
        <keyword> this </keyword>
       </term>
      </expression>
     <symbol> ; </symbol>
    </returnStatement>
   </statements>
   <symbol> } </symbol>
  </subroutineBody>
 </subroutineDec>
 <subroutineDec>
  <keyword> method </keyword>
  <keyword> void </keyword>
  <identifier> dispose </identifier>
  <symbol> ( </symbol>
  <parameterList>
  </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
   <symbol> { </symbol>
   <statements>
    <doStatement>
     <keyword> do </keyword>
     <identifier> Memory </identifier>
     <symbol> . </symbol>
     <identifier> deAlloc </identifier>
     <symbol> ( </symbol>
     <expressionList>
       <expression>
        <term>
         <keyword> this </keyword>
        </term>
       </expression>
     </expressionList>
     <symbol> ) </symbol>
     <symbol> ; </symbol>
    </doStatement>
    <returnStatement>
     <keyword> return </keyword>
     <symbol> ; </symbol>
    </returnStatement>
   </statements>
   <symbol> } </symbol>
  </subroutineBody>
 </subroutineDec>
 <subroutineDec>
  <keyword> method </keyword>
  <keyword> void </keyword>
  <identifier> draw </identifier>
  <symbol> ( </symbol>
  <parameterList>
  </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
   <symbol> { </symbol>
   <statements>
    <doStatement>
     <keyword> do </keyword>
     <identifier> Screen </identifier>
     <symbol> . </symbol>
     <identifier> setColor </identifier>
     <symbol> ( </symbol>
     <expressionList>
       <expression>
        <term>
         <keyword> true </keyword>
        </term>
       </expression>
     </expressionList>
     <symbol> ) </symbol>
     <symbol> ; </symbol>
    </doStatement>
    <doStatement>
     <keyword> do </keyword>
     <identifier> Screen </identifier>
     <symbol> . </symbol>
     <identifier> drawRectangle </identifier>
     <symbol> ( </symbol>
     <expressionList>
       <expression>
        <term>
         <identifier> x </identifier>
        </term>
       </expression>
      <symbol> , </symbol>
       <expression>
        <term>
         <identifier> y </identifier>
        </term>
       </expression>
      <symbol> , </symbol>
       <expression>
        <term>
         <identifier> x </identifier>
        </term>
       <symbol> + </symbol>
        <term>
         <identifier> size </identifier>
        </term>
       </expression>
      <symbol> , </symbol>
       <expression>
        <term>
         <identifier> y </identifier>
        </term>
       <symbol> + </symbol>
        <term>
         <identifier> size </identifier>
        </term>
       </expression>
     </expressionList>
     <symbol> ) </symbol>
     <symbol> ; </symbol>
    </doStatement>
    <returnStatement>
     <keyword> return </keyword>
     <symbol> ; </symbol>
    </returnStatement>
   </statements>
   <symbol> } </symbol>
  </subroutineBody>
 </subroutineDec>
 <subroutineDec>
  <keyword> method </keyword>
  <keyword> void </keyword>
  <identifier> erase </identifier>
  <symbol> ( </symbol>
  <parameterList>
  </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
   <symbol> { </symbol>
   <statements>
    <doStatement>
     <keyword> do </keyword>
     <identifier> Screen </identifier>
     <symbol> . </symbol>
     <identifier> setColor </identifier>
     <symbol> ( </symbol>
     <expressionList>
       <expression>
        <term>
         <keyword> false </keyword>
        </term>
       </expression>
     </expressionList>
     <symbol> ) </symbol>
     <symbol> ; </symbol>
    </doStatement>
    <doStatement>
     <keyword> do </keyword>
     <identifier> Screen </identifier>
     <symbol> . </symbol>
     <identifier> drawRectangle </identifier>
     <symbol> ( </symbol>
     <expressionList>
       <expression>
        <term>
         <identifier> x </identifier>
        </term>
       </expression>
      <symbol> , </symbol>
       <expression>
        <term>
         <identifier> y </identifier>
        </term>
       </expression>
      <symbol> , </symbol>
       <expression>
        <term>
         <identifier> x </identifier>
        </term>
       <symbol> + </symbol>
        <term>
         <identifier> size </identifier>
        </term>
       </expression>
      <symbol> , </symbol>
       <expression>
        <term>
         <identifier> y </identifier>
        </term>
       <symbol> + </symbol>
        <term>
         <identifier> size </identifier>
        </term>
       </expression>
     </expressionList>
     <symbol> ) </symbol>
     <symbol> ; </symbol>
    </doStatement>
    <returnStatement>
     <keyword> return </keyword>
     <symbol> ; </symbol>
    </returnStatement>
   </statements>
   <symbol> } </symbol>
  </subroutineBody>
 </subroutineDec>
 <subroutineDec>
  <keyword> method </keyword>
  <keyword> void </keyword>
  <identifier> incSize </identifier>
  <symbol> ( </symbol>
  <parameterList>
  </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
   <symbol> { </symbol>
   <statements>
    <ifStatement>
     <keyword> if </keyword>
     <symbol> ( </symbol>
      <expression>
       <term>
        <symbol> ( </symbol>
         <expression>
          <term>
           <symbol> ( </symbol>
            <expression>
             <term>
              <identifier> y </identifier>
             </term>
            <symbol> + </symbol>
             <term>
              <identifier> size </identifier>
             </term>
            </expression>
           <symbol> ) </symbol>
          </term>
         <symbol> &lt; </symbol>
          <term>
           <integerConstant> 254 </integerConstant>
          </term>
         </expression>
        <symbol> ) </symbol>
       </term>
      <symbol> &amp; </symbol>
       <term>
        <symbol> ( </symbol>
         <expression>
          <term>
           <symbol> ( </symbol>
            <expression>
             <term>
              <identifier> x </identifier>
             </term>
            <symbol> + </symbol>
             <term>
              <identifier> size </identifier>
             </term>
            </expression>
           <symbol> ) </symbol>
          </term>
         <symbol> &lt; </symbol>
          <term>
           <integerConstant> 510 </integerConstant>
          </term>
         </expression>
        <symbol> ) </symbol>
       </term>
      </expression>
     <symbol> ) </symbol>
     <symbol> { </symbol>
     <statements>
      <doStatement>
       <keyword> do </keyword>
       <identifier> erase </identifier>
       <symbol> ( </symbol>
       <expressionList>
       </expressionList>
       <symbol> ) </symbol>
       <symbol> ; </symbol>
      </doStatement>
      <letStatement>
       <keyword> let </keyword>
       <identifier> size </identifier>
       <symbol> = </symbol>
        <expression>
         <term>
          <identifier> size </identifier>
         </term>
        <symbol> + </symbol>
         <term>
          <integerConstant> 2 </integerConstant>
         </term>
        </expression>
       <symbol> ; </symbol>
      </letStatement>
      <doStatement>
       <keyword> do </keyword>
       <identifier> draw </identifier>
       <symbol> ( </symbol>
       <expressionList>
       </expressionList>
       <symbol> ) </symbol>
       <symbol> ; </symbol>
      </doStatement>
     </statements>
     <symbol> } </symbol>
    </ifStatement>
    <returnStatement>
     <keyword> return </keyword>
     <symbol> ; </symbol>
    </returnStatement>
   </statements>
   <symbol> } </symbol>
  </subroutineBody>
 </subroutineDec>
 <subroutineDec>
  <keyword> method </keyword>
  <keyword> void </keyword>
  <identifier> decSize </identifier>
  <symbol> ( </symbol>
  <parameterList>
  </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
   <symbol> { </symbol>
   <statements>
    <ifStatement>
     <keyword> if </keyword>
     <symbol> ( </symbol>
      <expression>
       <term>
        <identifier> size </identifier>
       </term>
      <symbol> &gt; </symbol>
       <term>
        <integerConstant> 2 </integerConstant>
       </term>
      </expression>
     <symbol> ) </symbol>
     <symbol> { </symbol>
     <statements>
      <doStatement>
       <keyword> do </keyword>
       <identifier> erase </identifier>
       <symbol> ( </symbol>
       <expressionList>
       </expressionList>
       <symbol> ) </symbol>
       <symbol> ; </symbol>
      </doStatement>
      <letStatement>
       <keyword> let </keyword>
       <identifier> size </identifier>
       <symbol> = </symbol>
        <expression>
         <term>
          <identifier> size </identifier>
         </term>
        <symbol> - </symbol>
         <term>
          <integerConstant> 2 </integerConstant>
         </term>
        </expression>
       <symbol> ; </symbol>
      </letStatement>
      <doStatement>
       <keyword> do </keyword>
       <identifier> draw </identifier>
       <symbol> ( </symbol>
       <expressionList>
       </expressionList>
       <symbol> ) </symbol>
       <symbol> ; </symbol>
      </doStatement>
     </statements>
     <symbol> } </symbol>
    </ifStatement>
    <returnStatement>
     <keyword> return </keyword>
     <symbol> ; </symbol>
    </returnStatement>
   </statements>
   <symbol> } </symbol>
  </subroutineBody>
 </subroutineDec>
 <subroutineDec>
  <keyword> method </keyword>
  <keyword> void </keyword>
  <identifier> moveUp </identifier>
  <symbol> ( </symbol>
  <parameterList>
  </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
   <symbol> { </symbol>
   <statements>
    <ifStatement>
     <keyword> if </keyword>
     <symbol> ( </symbol>
      <expression>
       <term>
        <identifier> y </identifier>
       </term>
      <symbol> &gt; </symbol>
       <term>
        <integerConstant> 1 </integerConstant>
       </term>
      </expression>
     <symbol> ) </symbol>
     <symbol> { </symbol>
     <statements>
      <doStatement>
       <keyword> do </keyword>
       <identifier> Screen </identifier>
       <symbol> . </symbol>
       <identifier> setColor </identifier>
       <symbol> ( </symbol>
       <expressionList>
         <expression>
          <term>
           <keyword> false </keyword>
          </term>
         </expression>
       </expressionList>
       <symbol> ) </symbol>
       <symbol> ; </symbol>
      </doStatement>
      <doStatement>
       <keyword> do </keyword>
       <identifier> Screen </identifier>
       <symbol> . </symbol>
       <identifier> drawRectangle </identifier>
       <symbol> ( </symbol>
       <expressionList>
         <expression>
          <term>
           <identifier> x </identifier>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <symbol> ( </symbol>
            <expression>
             <term>
              <identifier> y </identifier>
             </term>
            <symbol> + </symbol>
             <term>
              <identifier> size </identifier>
             </term>
            </expression>
           <symbol> ) </symbol>
          </term>
         <symbol> - </symbol>
          <term>
           <integerConstant> 1 </integerConstant>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> x </identifier>
          </term>
         <symbol> + </symbol>
          <term>
           <identifier> size </identifier>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> y </identifier>
          </term>
         <symbol> + </symbol>
          <term>
           <identifier> size </identifier>
          </term>
         </expression>
       </expressionList>
       <symbol> ) </symbol>
       <symbol> ; </symbol>
      </doStatement>
      <letStatement>
       <keyword> let </keyword>
       <identifier> y </identifier>
       <symbol> = </symbol>
        <expression>
         <term>
          <identifier> y </identifier>
         </term>
        <symbol> - </symbol>
         <term>
          <integerConstant> 2 </integerConstant>
         </term>
        </expression>
       <symbol> ; </symbol>
      </letStatement>
      <doStatement>
       <keyword> do </keyword>
       <identifier> Screen </identifier>
       <symbol> . </symbol>
       <identifier> setColor </identifier>
       <symbol> ( </symbol>
       <expressionList>
         <expression>
          <term>
           <keyword> true </keyword>
          </term>
         </expression>
       </expressionList>
       <symbol> ) </symbol>
       <symbol> ; </symbol>
      </doStatement>
      <doStatement>
       <keyword> do </keyword>
       <identifier> Screen </identifier>
       <symbol> . </symbol>
       <identifier> drawRectangle </identifier>
       <symbol> ( </symbol>
       <expressionList>
         <expression>
          <term>
           <identifier> x </identifier>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> y </identifier>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> x </identifier>
          </term>
         <symbol> + </symbol>
          <term>
           <identifier> size </identifier>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> y </identifier>
          </term>
         <symbol> + </symbol>
          <term>
           <integerConstant> 1 </integerConstant>
          </term>
         </expression>
       </expressionList>
       <symbol> ) </symbol>
       <symbol> ; </symbol>
      </doStatement>
     </statements>
     <symbol> } </symbol>
    </ifStatement>
    <returnStatement>
     <keyword> return </keyword>
     <symbol> ; </symbol>
    </returnStatement>
   </statements>
   <symbol> } </symbol>
  </subroutineBody>
 </subroutineDec>
 <subroutineDec>
  <keyword> method </keyword>
  <keyword> void </keyword>
  <identifier> moveDown </identifier>
  <symbol> ( </symbol>
  <parameterList>
  </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
   <symbol> { </symbol>
   <statements>
    <ifStatement>
     <keyword> if </keyword>
     <symbol> ( </symbol>
      <expression>
       <term>
        <symbol> ( </symbol>
         <expression>
          <term>
           <identifier> y </identifier>
          </term>
         <symbol> + </symbol>
          <term>
           <identifier> size </identifier>
          </term>
         </expression>
        <symbol> ) </symbol>
       </term>
      <symbol> &lt; </symbol>
       <term>
        <integerConstant> 254 </integerConstant>
       </term>
      </expression>
     <symbol> ) </symbol>
     <symbol> { </symbol>
     <statements>
      <doStatement>
       <keyword> do </keyword>
       <identifier> Screen </identifier>
       <symbol> . </symbol>
       <identifier> setColor </identifier>
       <symbol> ( </symbol>
       <expressionList>
         <expression>
          <term>
           <keyword> false </keyword>
          </term>
         </expression>
       </expressionList>
       <symbol> ) </symbol>
       <symbol> ; </symbol>
      </doStatement>
      <doStatement>
       <keyword> do </keyword>
       <identifier> Screen </identifier>
       <symbol> . </symbol>
       <identifier> drawRectangle </identifier>
       <symbol> ( </symbol>
       <expressionList>
         <expression>
          <term>
           <identifier> x </identifier>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> y </identifier>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> x </identifier>
          </term>
         <symbol> + </symbol>
          <term>
           <identifier> size </identifier>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> y </identifier>
          </term>
         <symbol> + </symbol>
          <term>
           <integerConstant> 1 </integerConstant>
          </term>
         </expression>
       </expressionList>
       <symbol> ) </symbol>
       <symbol> ; </symbol>
      </doStatement>
      <letStatement>
       <keyword> let </keyword>
       <identifier> y </identifier>
       <symbol> = </symbol>
        <expression>
         <term>
          <identifier> y </identifier>
         </term>
        <symbol> + </symbol>
         <term>
          <integerConstant> 2 </integerConstant>
         </term>
        </expression>
       <symbol> ; </symbol>
      </letStatement>
      <doStatement>
       <keyword> do </keyword>
       <identifier> Screen </identifier>
       <symbol> . </symbol>
       <identifier> setColor </identifier>
       <symbol> ( </symbol>
       <expressionList>
         <expression>
          <term>
           <keyword> true </keyword>
          </term>
         </expression>
       </expressionList>
       <symbol> ) </symbol>
       <symbol> ; </symbol>
      </doStatement>
      <doStatement>
       <keyword> do </keyword>
       <identifier> Screen </identifier>
       <symbol> . </symbol>
       <identifier> drawRectangle </identifier>
       <symbol> ( </symbol>
       <expressionList>
         <expression>
          <term>
           <identifier> x </identifier>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <symbol> ( </symbol>
            <expression>
             <term>
              <identifier> y </identifier>
             </term>
            <symbol> + </symbol>
             <term>
              <identifier> size </identifier>
             </term>
            </expression>
           <symbol> ) </symbol>
          </term>
         <symbol> - </symbol>
          <term>
           <integerConstant> 1 </integerConstant>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> x </identifier>
          </term>
         <symbol> + </symbol>
          <term>
           <identifier> size </identifier>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> y </identifier>
          </term>
         <symbol> + </symbol>
          <term>
           <identifier> size </identifier>
          </term>
         </expression>
       </expressionList>
       <symbol> ) </symbol>
       <symbol> ; </symbol>
      </doStatement>
     </statements>
     <symbol> } </symbol>
    </ifStatement>
    <returnStatement>
     <keyword> return </keyword>
     <symbol> ; </symbol>
    </returnStatement>
   </statements>
   <symbol> } </symbol>
  </subroutineBody>
 </subroutineDec>
 <subroutineDec>
  <keyword> method </keyword>
  <keyword> void </keyword>
  <identifier> moveLeft </identifier>
  <symbol> ( </symbol>
  <parameterList>
  </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
   <symbol> { </symbol>
   <statements>
    <ifStatement>
     <keyword> if </keyword>
     <symbol> ( </symbol>
      <expression>
       <term>
        <identifier> x </identifier>
       </term>
      <symbol> &gt; </symbol>
       <term>
        <integerConstant> 1 </integerConstant>
       </term>
      </expression>
     <symbol> ) </symbol>
     <symbol> { </symbol>
     <statements>
      <doStatement>
       <keyword> do </keyword>
       <identifier> Screen </identifier>
       <symbol> . </symbol>
       <identifier> setColor </identifier>
       <symbol> ( </symbol>
       <expressionList>
         <expression>
          <term>
           <keyword> false </keyword>
          </term>
         </expression>
       </expressionList>
       <symbol> ) </symbol>
       <symbol> ; </symbol>
      </doStatement>
      <doStatement>
       <keyword> do </keyword>
       <identifier> Screen </identifier>
       <symbol> . </symbol>
       <identifier> drawRectangle </identifier>
       <symbol> ( </symbol>
       <expressionList>
         <expression>
          <term>
           <symbol> ( </symbol>
            <expression>
             <term>
              <identifier> x </identifier>
             </term>
            <symbol> + </symbol>
             <term>
              <identifier> size </identifier>
             </term>
            </expression>
           <symbol> ) </symbol>
          </term>
         <symbol> - </symbol>
          <term>
           <integerConstant> 1 </integerConstant>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> y </identifier>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> x </identifier>
          </term>
         <symbol> + </symbol>
          <term>
           <identifier> size </identifier>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> y </identifier>
          </term>
         <symbol> + </symbol>
          <term>
           <identifier> size </identifier>
          </term>
         </expression>
       </expressionList>
       <symbol> ) </symbol>
       <symbol> ; </symbol>
      </doStatement>
      <letStatement>
       <keyword> let </keyword>
       <identifier> x </identifier>
       <symbol> = </symbol>
        <expression>
         <term>
          <identifier> x </identifier>
         </term>
        <symbol> - </symbol>
         <term>
          <integerConstant> 2 </integerConstant>
         </term>
        </expression>
       <symbol> ; </symbol>
      </letStatement>
      <doStatement>
       <keyword> do </keyword>
       <identifier> Screen </identifier>
       <symbol> . </symbol>
       <identifier> setColor </identifier>
       <symbol> ( </symbol>
       <expressionList>
         <expression>
          <term>
           <keyword> true </keyword>
          </term>
         </expression>
       </expressionList>
       <symbol> ) </symbol>
       <symbol> ; </symbol>
      </doStatement>
      <doStatement>
       <keyword> do </keyword>
       <identifier> Screen </identifier>
       <symbol> . </symbol>
       <identifier> drawRectangle </identifier>
       <symbol> ( </symbol>
       <expressionList>
         <expression>
          <term>
           <identifier> x </identifier>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> y </identifier>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> x </identifier>
          </term>
         <symbol> + </symbol>
          <term>
           <integerConstant> 1 </integerConstant>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> y </identifier>
          </term>
         <symbol> + </symbol>
          <term>
           <identifier> size </identifier>
          </term>
         </expression>
       </expressionList>
       <symbol> ) </symbol>
       <symbol> ; </symbol>
      </doStatement>
     </statements>
     <symbol> } </symbol>
    </ifStatement>
    <returnStatement>
     <keyword> return </keyword>
     <symbol> ; </symbol>
    </returnStatement>
   </statements>
   <symbol> } </symbol>
  </subroutineBody>
 </subroutineDec>
 <subroutineDec>
  <keyword> method </keyword>
  <keyword> void </keyword>
  <identifier> moveRight </identifier>
  <symbol> ( </symbol>
  <parameterList>
  </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
   <symbol> { </symbol>
   <statements>
    <ifStatement>
     <keyword> if </keyword>
     <symbol> ( </symbol>
      <expression>
       <term>
        <symbol> ( </symbol>
         <expression>
          <term>
           <identifier> x </identifier>
          </term>
         <symbol> + </symbol>
          <term>
           <identifier> size </identifier>
          </term>
         </expression>
        <symbol> ) </symbol>
       </term>
      <symbol> &lt; </symbol>
       <term>
        <integerConstant> 510 </integerConstant>
       </term>
      </expression>
     <symbol> ) </symbol>
     <symbol> { </symbol>
     <statements>
      <doStatement>
       <keyword> do </keyword>
       <identifier> Screen </identifier>
       <symbol> . </symbol>
       <identifier> setColor </identifier>
       <symbol> ( </symbol>
       <expressionList>
         <expression>
          <term>
           <keyword> false </keyword>
          </term>
         </expression>
       </expressionList>
       <symbol> ) </symbol>
       <symbol> ; </symbol>
      </doStatement>
      <doStatement>
       <keyword> do </keyword>
       <identifier> Screen </identifier>
       <symbol> . </symbol>
       <identifier> drawRectangle </identifier>
       <symbol> ( </symbol>
       <expressionList>
         <expression>
          <term>
           <identifier> x </identifier>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> y </identifier>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> x </identifier>
          </term>
         <symbol> + </symbol>
          <term>
           <integerConstant> 1 </integerConstant>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> y </identifier>
          </term>
         <symbol> + </symbol>
          <term>
           <identifier> size </identifier>
          </term>
         </expression>
       </expressionList>
       <symbol> ) </symbol>
       <symbol> ; </symbol>
      </doStatement>
      <letStatement>
       <keyword> let </keyword>
       <identifier> x </identifier>
       <symbol> = </symbol>
        <expression>
         <term>
          <identifier> x </identifier>
         </term>
        <symbol> + </symbol>
         <term>
          <integerConstant> 2 </integerConstant>
         </term>
        </expression>
       <symbol> ; </symbol>
      </letStatement>
      <doStatement>
       <keyword> do </keyword>
       <identifier> Screen </identifier>
       <symbol> . </symbol>
       <identifier> setColor </identifier>
       <symbol> ( </symbol>
       <expressionList>
         <expression>
          <term>
           <keyword> true </keyword>
          </term>
         </expression>
       </expressionList>
       <symbol> ) </symbol>
       <symbol> ; </symbol>
      </doStatement>
      <doStatement>
       <keyword> do </keyword>
       <identifier> Screen </identifier>
       <symbol> . </symbol>
       <identifier> drawRectangle </identifier>
       <symbol> ( </symbol>
       <expressionList>
         <expression>
          <term>
           <symbol> ( </symbol>
            <expression>
             <term>
              <identifier> x </identifier>
             </term>
            <symbol> + </symbol>
             <term>
              <identifier> size </identifier>
             </term>
            </expression>
           <symbol> ) </symbol>
          </term>
         <symbol> - </symbol>
          <term>
           <integerConstant> 1 </integerConstant>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> y </identifier>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> x </identifier>
          </term>
         <symbol> + </symbol>
          <term>
           <identifier> size </identifier>
          </term>
         </expression>
        <symbol> , </symbol>
         <expression>
          <term>
           <identifier> y </identifier>
          </term>
         <symbol> + </symbol>
          <term>
           <identifier> size </identifier>
          </term>
         </expression>
       </expressionList>
       <symbol> ) </symbol>
       <symbol> ; </symbol>
      </doStatement>
     </statements>
     <symbol> } </symbol>
    </ifStatement>
    <returnStatement>
     <keyword> return </keyword>
     <symbol> ; </symbol>
    </returnStatement>
   </statements>
   <symbol> } </symbol>
  </subroutineBody>
 </subroutineDec>
 <symbol> } </symbol>
</class>
<class>
 <keyword> class </keyword>
 <identifier> SquareGame </identifier>
 <symbol> { </symbol>
 <classVarDec>
  <keyword> field </keyword>
  <identifier> Square </identifier>
  <identifier> square </identifier>
  <symbol> ; </symbol>
 </classVarDec>
 <classVarDec>
  <keyword> field </keyword>
  <keyword> int </keyword>
  <identifier> direction </identifier>
  <symbol> ; </symbol>
 </classVarDec>
 <subroutineDec>
  <keyword> constructor </keyword>
  <identifier> SquareGame </identifier>
  <identifier> new </identifier>
  <symbol> ( </symbol>
  <parameterList>
  </parameterList>
  <symbol> ) </symbol>
  <subroutineBody>
   <symbol> { </symbol>
   <statements>
    <letStatement>
     <keyword> let </keyword>
     <identifier> square </identifier>
     <symbol> = </symbol>
      <expression>
       <term>
        <identifier> Square </identifier>
        <symbol> . </symbol>
        <identifier> new </identifier>
        <symbol> ( </symbol>
        <expressionList>
        </expressionList>
