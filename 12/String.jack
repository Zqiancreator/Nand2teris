// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field int length;
	field Array str;
	field int capacity;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		let length = 0;
		let capacity = maxLength;
		let str = Array.new(maxLength);
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do str.dispose();
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		if(j < length){
			return str[j];
			
		}else{
			do Sys.error();
			return 0;
		}
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		if(j > capacity){
			do Sys.error();
		}
		let str[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		if(length = capacity){
			return this;
		}
		let str[length] = c;
		let length = length + 1;
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		if(length > 0){
			let length = length - 1;
		}
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int i, res;
		var boolean neg;
		if(res.length() > 0 & res[0] = 45){
			let neg = true;
			let i = 1;
		}
		let res = 0;
		while(i < length & (~(res[i] < 48) & ~(res[i] > 57))){
			let res = res*10;
			let res = res + str[i];
		}
		if(neg){
			let res = -res;
		}
		return res;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		var String temS;
		var int cur, len;
		do temS.new(20); 
		if(val < 0){
			let val = -val;
			do str.appendChar(45);
		}
		while(val > 0){
			let cur = val - (val/10 * 10) + 48;
			do temS.appendChar(cur);
		}
		let len = temS.length() - 1;
		while(~(len < 0)){
			do str.appendChar(temS[len]);
		}
		do temS.dispose();
		return;
    }

     /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
